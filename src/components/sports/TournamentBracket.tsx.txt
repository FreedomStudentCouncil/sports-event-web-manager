import React, { useState, useEffect, useMemo, useCallback } from 'react';
import {
  Box,
  Button,
  Typography,
  Paper,
  IconButton,
  Grid,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  MenuItem,
  Select,
  FormControl,
  InputLabel,
  Chip,
  Stack,
  Card,
  CardContent,
  Tooltip,
  useTheme,
  FormControlLabel,
  Switch
} from '@mui/material';
import {
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Save as SaveIcon,
  Shuffle as ShuffleIcon,
} from '@mui/icons-material';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import { Sport, Match, Team } from '../../types/index';
import { useTranslation } from 'react-i18next';
import { useThemeContext } from '../../contexts/ThemeContext';
import { SingleEliminationBracket, SVGViewer, Participant } from '@g-loot/react-tournament-brackets';
import { TournamentStructureHelper } from './../admin/scoring/components/TournamentStructureHelper';

interface TournamentBracketProps {
  sport: Sport;
  onUpdate: (updatedSport: Sport) => void;
  readOnly?: boolean; // 読み取り専用モードを追加
}

// トーナメントブラケットのmatchComponentの型定義を追加
interface MatchComponentProps {
  match: {
    id: string;
    name: string;
    nextMatchId: string | null;
    tournamentRoundText: string;
    startTime: string;
    state: 'DONE' | 'PLAYING' | 'SCHEDULED';
    participants: Participant[];
  };
  onMatchClick?: () => void;
  onPartyClick?: (party: Participant) => void;
  topParty: Participant;
  bottomParty: Participant;
  x: number;
  y: number;
  width: number;
  height: number;
}

const TournamentBracket: React.FC<TournamentBracketProps> = ({ 
  sport, 
  onUpdate,
  readOnly = false // デフォルトは編集可能
}) => {
  const { t } = useTranslation();
  const theme = useTheme();
  const { alpha } = useThemeContext();

  // 試合データの状態管理
  const [matches, setMatches] = useState<Match[]>(sport.matches || []);
  const [selectedMatch, setSelectedMatch] = useState<Match | null>(null);
  const [matchDialogOpen, setMatchDialogOpen] = useState(false);
  const [hasThirdPlace, setHasThirdPlace] = useState(false);
  const [isDialogProcessing, setIsDialogProcessing] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [updateQueue, setUpdateQueue] = useState<Sport | null>(null);

  // SVG要素を大文字で定義
  const ForeignObject = 'foreignObject';

  // 参加者の状態を判定する関数を修正
  const getParticipantStatus = (teamId: string | null, match: Match): 'no-team' | 'waiting' | null => {
    if (!teamId) return 'no-team';

    // シード試合の判定
    if (TournamentStructureHelper.isNoTeam(teamId, match, matches)) return 'no-team';

    // 両チームが揃っているかチェック
    if (match.team1Id && match.team2Id) {
      const team1HasPrevious = matches.some(m => 
        m.round === match.round - 1 && 
        (m.team1Id === match.team1Id || m.team2Id === match.team1Id)
      );
      const team2HasPrevious = matches.some(m => 
        m.round === match.round - 1 && 
        (m.team1Id === match.team2Id || m.team2Id === match.team2Id)
      );

      // 両チームとも前の試合がある場合は通常表示
      if (team1HasPrevious && team2HasPrevious) return null;
    }

    // このチームの前の試合をチェック
    const previousMatch = matches.find(m => 
      m.round === match.round - 1 && 
      (m.team1Id === teamId || m.team2Id === teamId)
    );

    // 前の試合がある場合かつその勝者が未定の場合は待機状態
    if (previousMatch && !previousMatch.winnerId) return 'waiting';

    // 対戦相手の有無をチェック
    const hasOpponent = match.team1Id && match.team2Id;
    if (!hasOpponent) return 'waiting';

    return null;
  };

  // 試合の状態を判定する関数を追加
  const getMatchState = (match: Match): 'DONE' | 'PLAYING' | 'SCHEDULED' => {
    if (match.status === 'completed' || match.winnerId) return 'DONE';
    if (match.team1Score > 0 || match.team2Score > 0) return 'PLAYING';
    return 'SCHEDULED';
  };

  // トーナメント表示用のデータ
  const bracketMatches = useMemo(() => generateBracketMatches(sport, t), [sport, t]);

  // ラウンドごとの試合データを構築（修正）
  const roundMatches = useMemo(() => {
    if (!matches || matches.length === 0) {
      return [];
    }
    const regularMatches = matches.filter(m => m.matchNumber !== 0);
    const maxRound = Math.max(...regularMatches.map(m => m.round), 0);
    const rounds: Match[][] = [];
    
    // 各ラウンドの試合を格納
    for (let i = 1; i <= maxRound; i++) {
      const matchesInRound = regularMatches
        .filter(m => m.round === i)
        .sort((a, b) => a.matchNumber - b.matchNumber);
      if (matchesInRound.length > 0) {
        rounds.push(matchesInRound);
      }
    }
    // 3位決定戦があれば最後に追加
    const thirdPlaceMatch = matches.find(m => m.matchNumber === 0);
    if (thirdPlaceMatch) {
      rounds.push([thirdPlaceMatch]);
    }
    return rounds;
  }, [matches]);

  // 試合の編集
  const handleEditMatch = (match: Match) => {
    if (readOnly) return;
    setSelectedMatch(match);
    setMatchDialogOpen(true);
  };

  // 試合の更新（即時保存用）
  const handleMatchUpdate = async (updatedMatch: Match) => {
    if (readOnly) return;
    setIsDialogProcessing(true);
    try {
      const status = TournamentStructureHelper.getMatchStatus(updatedMatch);
      const newMatch = {
        ...updatedMatch,
        status,
        winnerId: updatedMatch.team1Score > updatedMatch.team2Score ? updatedMatch.team1Id :
                  updatedMatch.team2Score > updatedMatch.team1Score ? updatedMatch.team2Id :
                  undefined
      };

      let newMatches = matches.map(m => 
        m.id === newMatch.id ? newMatch : m
      );

      if (newMatch.winnerId) {
        newMatches = TournamentStructureHelper.progressWinnerToNextMatch(newMatch, newMatches);
      }

      setMatches(newMatches);
      
      // 更新キューに追加
      setUpdateQueue({
        ...sport,
        matches: newMatches
      });

      setMatchDialogOpen(false);
    } finally {
      setIsDialogProcessing(false);
    }
  };

  const handleMatchesCreate = (newMatches: Match[], selectedTeams: Team[]) => {
    if (readOnly) return;
    setMatches(newMatches);
    // 即時の状態更新
    const updatedSport = {
      ...sport,
      matches: newMatches,
      teams: selectedTeams
    };

    // 更新キューに追加
    setUpdateQueue(updatedSport);
  };

  // トーナメント表示のコンポーネント部分を修正
  const renderMatchComponent = useCallback(({
    match,
    onMatchClick,
    onPartyClick,
    topParty,
    bottomParty,
    ...props
  }: MatchComponentProps) => (
    <ForeignObject
      x={props.x - props.width / 2}
      y={props.y - props.height / 2}
      width={props.width}
      height={props.height}
    >
      <Box
        sx={{
          width: '100%',
          height: '100%',
          border: '1px solid',
          borderColor: theme.palette.divider,
          borderRadius: 1,
          overflow: 'hidden',
          backgroundColor: (topParty.status === 'no-team' && bottomParty.status === 'no-team') 
            ? theme.palette.grey[100] 
            : theme.palette.background.paper,
          boxShadow: 1
        }}
      >
        <Box sx={{ p: 0.5, backgroundColor: theme.palette.grey[100], borderBottom: `1px solid ${theme.palette.divider}` }}>
          <Typography variant="caption" noWrap>
            {match.name}
          </Typography>
        </Box>
        
        {/* 上側のチーム */}
        <Box
          sx={{
            p: 0.5,
            display: 'flex',
            justifyContent: 'space-between',
            backgroundColor: topParty.name === t('tournament.seed')
              ? theme.palette.text.disabled  // seed は灰色
              : topParty.name === t('tournament.tbd')
              ? 'inherit'
              : topParty.isWinner
              ? theme.palette.primary.light // 勝者は青
              : 'inherit',
            '&:hover': { backgroundColor: theme.palette.action.hover }
          }}
          onClick={() => onPartyClick && onPartyClick(topParty)}
        >
          <Typography variant="body2" noWrap sx={{ 
            maxWidth: '70%', 
            fontWeight: topParty.isWinner ? 'bold' : 'normal',
            bgcolor: topParty.isWinner || topParty.name === t('tournament.seed') || topParty.name === t('tournament.tbd')
              ? theme.palette.grey[100]  // seed と tbd のセルを灰色に
              : 'transparent',
            color: topParty.name === t('tournament.seed')
              ? theme.palette.text.disabled  // seed は灰色
              : topParty.name === t('tournament.tbd')
              ? theme.palette.warning.main  // tbd はオレンジ
              : topParty.isWinner
              ? theme.palette.primary.main // 勝者は青
              : 'inherit'
          }}>
            {topParty.name}
            {topParty.status === 'waiting' && ' (待機中)'}
          </Typography>
            <Typography variant="body2" sx={{ 
            fontWeight: 'bold',
            color: topParty.isWinner && topParty.name !== t('tournament.tbd') ? theme.palette.primary.light : 'inherit'
            }}>
            {topParty.score ? topParty.score : 0}
            </Typography>
        </Box>
        
        {/* 下側のチーム */}
        <Box
          sx={{
            p: 0.5,
            display: 'flex',
            justifyContent: 'space-between',
            backgroundColor: bottomParty.name === t('tournament.seed')
              ? theme.palette.text.disabled
              : bottomParty.name === t('tournament.tbd')
              ? 'inherit'  // seed と tbd のセルを灰色に
              : bottomParty.isWinner 
              ? theme.palette.primary.light 
              : 'transparent',
            borderTop: `1px solid ${theme.palette.divider}`,
            '&:hover': { backgroundColor: theme.palette.action.hover }
          }}
          onClick={() => onPartyClick && onPartyClick(bottomParty)}
        >
          <Typography variant="body2" noWrap sx={{ 
            maxWidth: '70%', 
            fontWeight: bottomParty.isWinner ? 'bold' : 'normal',
            bgcolor: (bottomParty.isWinner || bottomParty.name === t('tournament.tbd')) && bottomParty.name !== t('tournament.seed')
              ? theme.palette.grey[100]  // seed と tbd の背景色を灰色に
              : 'transparent',
            color: bottomParty.name === t('tournament.seed')
              ? theme.palette.text.disabled  // seed は灰色
              : bottomParty.name === t('tournament.tbd')
              ? theme.palette.warning.main  // tbd はオレンジ
              : bottomParty.isWinner
              ? theme.palette.primary.main
              : bottomParty.status === 'waiting'
              ? theme.palette.warning.main
              : 'inherit'
          }}>
            {bottomParty.name}
            {bottomParty.status === 'waiting' && ' (待機中)'}
          </Typography>
          <Typography variant="body2" sx={{ 
            fontWeight: 'bold',
            color: bottomParty.isWinner && bottomParty.name !== t('tournament.seed') && bottomParty.name !== t('tournament.tbd') ? theme.palette.primary.main : 'inherit'
          }}>
            {bottomParty.score ? bottomParty.score : (bottomParty.name === t('tournament.seed') ? '-' : 0)}
          </Typography>
        </Box>
      </Box>
    </ForeignObject>
  ), [theme, t]);

  // 更新を制御するためのデバウンス処理
  useEffect(() => {
    if (updateQueue && !isSaving) {
      const timer = setTimeout(async () => {
        setIsSaving(true);
        try {
          await onUpdate(updateQueue);
        } finally {
          setIsSaving(false);
          setUpdateQueue(null);
        }
      }, 1000);
      return () => clearTimeout(timer);
    }
  }, [updateQueue, isSaving, onUpdate]);

  return (
    <Box>
      {/* readOnlyモードの場合は設定パネルを非表示 */}
      {!readOnly && (
        <Paper sx={{ p: 2, mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
            <Typography variant="h6">
              {t('tournament.settings')}
            </Typography>
            <FormControlLabel
              control={
                <Switch
                  checked={hasThirdPlace}
                  onChange={(e) => {
                    setHasThirdPlace(e.target.checked);
                    // 3位決定戦の追加/削除ロジックをここに実装
                  }}
                />
              }
              label={t('tournament.hasThirdPlace')}
            />
          </Box>
        </Paper>
      )}

      {/* readOnlyモードの場合はビルダーを非表示 */}
      {!readOnly && (
        <TournamentBuilder
          sport={sport}
          onMatchesCreate={handleMatchesCreate}
        />
      )}
      
      {matches.length > 0 ? (
        <>
          {/* トーナメント図の表示 */}
          <Paper sx={{ p: 2, mb: 3 }}>
            <Box 
              sx={{ 
                width: '100%',
                height: Math.max(500, matches.length * 100),
                overflow: 'auto',
                '& svg': {
                  width: '100% !important',
                  height: '100% !important'
                }
              }}
            >
              {bracketMatches.length > 0 && (
                <SingleEliminationBracket
                  matches={bracketMatches}
                  matchComponent={renderMatchComponent}
                  options={{
                    style: {
                      roundHeader: {
                        backgroundColor: theme.palette.primary.main,
                        color: theme.palette.primary.contrastText,
                        fontWeight: 'bold'
                      },
                      connectorColor: theme.palette.divider,
                      connectorColorHighlight: theme.palette.primary.main,
                      matchBackground: {
                        wonColor: theme.palette.success.light,
                        lostColor: theme.palette.grey[100]
                      }
                    }
                  }}
                />
              )}
            </Box>
          </Paper>

          {/* ラウンドごとの試合リスト */}
          <Grid container spacing={2}>
            {roundMatches.length > 0 ? (
              roundMatches.map((matches, roundIndex) => (
                <Grid item xs={12} md={6} lg={4} key={roundIndex}>
                  <Paper sx={{ p: 2 }}>
                    <Typography variant="h6" gutterBottom>
                      {matches[0]?.matchNumber === 0
                        ? t('tournament.thirdPlace')
                        : roundIndex === roundMatches.length - 2
                        ? t('tournament.final')
                        : `${t('tournament.round')} ${roundIndex + 1}`}
                    </Typography>
                    <Stack spacing={1}>
                      {matches.map(match => (
                        <Card 
                          key={match.id}
                          sx={{ 
                            bgcolor: (!match.team1Id || !match.team2Id || 
                                    match.team1Id === t('tournament.tbd') || 
                                    match.team2Id === t('tournament.tbd'))
                              ? theme.palette.grey[100]  // tbd を含む試合カードも灰色に
                              : 'inherit'
                          }}
                        >
                          <CardContent>
                            <MatchCard
                              match={match}
                              sport={sport}
                              onEdit={() => handleEditMatch(match)}
                            />
                          </CardContent>
                        </Card>
                      ))}
                    </Stack>
                  </Paper>
                </Grid>
              ))
            ) : (
              <Grid item xs={12}>
                <Paper sx={{ p: 3, textAlign: 'center' }}>
                  <Typography color="text.secondary">
                    {t('tournament.noMatches')}
                  </Typography>
                </Paper>
              </Grid>
            )}
          </Grid>
        </>
      ) : (
        <Paper sx={{ p: 3, textAlign: 'center' }}>
          <Typography color="text.secondary">
            {t('tournament.noMatches')}
          </Typography>
        </Paper>
      )}

      {/* ダイアログのパフォーマンス最適化 */}
      {matchDialogOpen && selectedMatch && (
        <MatchEditDialog
          open={true}
          match={selectedMatch}
          sport={sport}
          onSave={handleMatchUpdate}
          teamRosters={sport.roster?.grade1 || {}}
          onClose={() => !isDialogProcessing && setMatchDialogOpen(false)}
          disabled={isDialogProcessing}
        />
      )}
    </Box>
  );
};

export default TournamentBracket;
